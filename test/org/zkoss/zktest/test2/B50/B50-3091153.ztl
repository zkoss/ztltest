<!-- B50-3091153.ztl.java

	Purpose:for testing B50-3091153.ztl .

	Description:

	History:
		05, 11, 2011 11:00:55

Copyright (C) 2011 Potix Corporation. All Rights Reserved.

This program is distributed under Apache License Version 2.0 in the hope that
it will be useful, but WITHOUT ANY WARRANTY.
-->
<test tags="B50-3091153.zul,A,E,Tree,TreeModel">
	<case id="ztl">
		<server><!--
			<?page title="new page title" contentType="text/html;charset=UTF-8"?>
<zk>
<html><![CDATA[
<ol>
 <li>Click the open icon to open the tree item</li>
 <li>Click the deSelectAll button to deselect all. All of them shall be de-selected</li>
 <li>Click the selectAll button and all shall be selected</li>
</ol>
]]></html>


<zscript><![CDATA[
import org.zkoss.zk.ui.Components;
import org.zkoss.zk.ui.event.ForwardEvent;
import org.zkoss.zk.ui.ext.AfterCompose;
import org.zkoss.zul.Checkbox;
import org.zkoss.zul.Tree;
import org.zkoss.zul.TreeModel;
import org.zkoss.zul.Treeitem;
import org.zkoss.zul.TreeitemRenderer;
import org.zkoss.zul.Window;
import org.zkoss.zul.event.TreeDataListener;

public class Test14105Window extends Window implements AfterCompose {
	private Tree tree;

	public void afterCompose() {
		tree = this.getFellow("tree");
		tree.setTreeitemRenderer(new MyTreeitemRenderer());
		tree.setModel(new MyTreeModel());
	}
}
public class MyTreeitemRenderer implements TreeitemRenderer {
	public void render(Treeitem treeitem, Object arg1, int index) throws Exception {
		treeitem.setLabel(arg1.toString());
		treeitem.setSelected(true);
	}
}
public class MyTreeModel implements TreeModel,
		 org.zkoss.zul.ext.TreeSelectableModel {
	public void addTreeDataListener(TreeDataListener arg0) {
		// TODO Auto-generated method stub	
	}

	public Object getChild(Object arg0, int arg1) {
		if (arg0.getClass().isArray())
			return "tttt";
		return "dd";
	}

	public int getChildCount(Object arg0) {
		if (arg0.getClass().isArray())
			return ((String[]) arg0).length;
			// TODO Auto-generated method stub
		return "tttt".equals(arg0) ? 5 : 0;
	}
	public int[] getPath(Object child) {
		List path = new ArrayList();
		dfSearch(path, getRoot(), child);

		final int[] ipath = new int[path.size()];
		for (int j = 0; j < ipath.length; j++)
			ipath[j] = path.get(j);
		return ipath;
	}
	private boolean dfSearch(List path, Object node, Object target){
		if (node.equals(target))
			return true;
		if (isLeaf(node))
			return false;

		for (int i = 0, size = getChildCount(node); i< size; i++)
			if (dfSearch(path, getChild(node, i), target)){
				path.add(0, new Integer(i));
				return true;
			}
		return false;
	}
	public Object getChild(int[] path) {
		Object parent = getRoot();
		Object node = null;
		int childCount = getChildCount(parent);
		for (int i = 0; i < path.length; i++) {
			if (path[i] < 0 || path[i] > childCount)
				return null;
			node = getChild(parent, path[i]);

			if (node != null && (childCount = getChildCount(node)) > 0) {
				parent = node;
			} else if (i != path.length - 1) {
				return null;
			}
		}
		return node;
	}
	public Object getRoot() {
		// TODO Auto-generated method stub
		return new String[] { "tttt" };
	}

	public boolean isLeaf(Object arg0) {
		if (arg0.getClass().isArray())
			return false;
		// TODO Auto-generated method stub
		return !"tttt".equals(arg0);
	}

	public void removeTreeDataListener(TreeDataListener arg0) {
		// TODO Auto-generated method stub
	}public void setMultiple(boolean multiple) {
		// TODO Auto-generated method stub

	}

	public boolean isMultiple() {
		// TODO Auto-generated method stub
		return true;
	}

	public void addSelectionPath(int[] path) {
		// TODO Auto-generated method stub

	}

	public void addSelectionPaths(int[][] paths) {
		// TODO Auto-generated method stub

	}

	public boolean removeSelectionPath(int[] path) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean removeSelectionPaths(int[][] paths) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean isPathSelected(int[] path) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean isSelectionEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	public void clearSelection() {
		// TODO Auto-generated method stub

	}

	public int[] getSelectionPath() {
		// TODO Auto-generated method stub
		return null;
	}

	public int[][] getSelectionPaths() {
		// TODO Auto-generated method stub
		return null;
	}

	public int getSelectionCount() {
		// TODO Auto-generated method stub
		return 0;
	}
}
]]></zscript>
<window use="Test14105Window" title="new page title"	
border="normal">
<tree id="tree" height="300px" checkmark="true" multiple="true" />
<button label="selectAll" onClick="tree.selectAll()"/>
<button label="deSelectAll" onClick="tree.clearSelection()"/>
</window>
</zk>



		--></server>
		<client><![CDATA[
				verifyEquals(1,jq(".z-treerow").length());
				verifyEquals(1,jq(".z-treerow-selected").length());
				click(jq(".z-treerow").toWidget().$n("icon"));
				waitResponse();
				verifyEquals(6,jq(".z-treerow-selected").length());
				verifyEquals(6,jq(".z-treerow").length());
				click(jq("@button[label=\"deSelectAll\"]"));
				waitResponse();
				verifyEquals(0,jq(".z-treerow-selected").length());
				verifyEquals(6,jq(".z-treerow").length());
				click(jq("@button[label=\"selectAll\"]"));
				waitResponse();
				verifyEquals(6,jq(".z-treerow-selected").length());
				verifyEquals(6,jq(".z-treerow").length());
		]]></client>
	</case>
</test>